#!env ruby

require "commander"
require "mcarg"
require "solid_assert"
require "ruby-prof"

SolidAssert.enable_assertions

class MCArgBin
  include Commander::Methods

  def scan_filters(options)
    filters     = [MCArg.method(:no_duplicate)]
    filters_opt = {graph: @@graph}
    filters << MCArg.method(:no_goal_self_attacks) unless options.goalatks
    filters << MCArg.method(:relevant_args) if options.onlyrelevant
    {func: filters, params: filters_opt}
  end

  def build_params_hash(options)
    params = {}
    params[:filters] = scan_filters(options)
    params[:horizon] = options.horizon
    params[:dec]     = {func: MCArg.method(options.decfunc),
                        params: {alpha: options.alpha,
                                discount: options.discount}}
    params[:belief]  = {func: MCArg.method(options.belieffunc),
                        params: {factor: options.updatefactor}}
    params[:val]     = {func: MCArg.method(options.valfunc),
                        params: {}}
    params[:agg]     = {func: MCArg.method(options.aggfunc),
                        params: {weights: options.weights}}
    params[:quiet]   = options.quiet
    params
  end

  BELIEF_UPDATE_FUNCTIONS = %i(naive strict ambivalent trusting)
  DECISION_FUNCTIONS      = %i(maximin maximax laplace hurwicz minmaxregret)
  AGGREGATION_FUNCTIONS   = %i(w_avg owa max min)
  VALUATION_FUNCTIONS     = %i(present)

  def run
    program :name, "mcarg"
    program :version, MCArg::VERSION
    program :description, "Optimization of persuasion dialogues using decision trees."
    program :help_formatter, :compact

    command :drawgraph do |c|
      c.syntax = "mcarg drawgraph sourcefile outputname"
      c.summary = "Draw the argument graph using Graphviz"
      c.description = "Draw the argument graph using Graphviz."
      c.action do |args|
        @@graph = MCArg::Graph.build_from_apx(args.shift)
        @@graph.draw_graph(args.shift)
      end
    end

    command :optimize do |c|
      c.syntax = "mcarg optimize sourcefile [options]"
      c.summary = "Compute the optimal policy of the underlying decision tree"
      c.description = "Compute the optimal policy of the underlying decision tree."
      c.option "--[no-]draw", TrueClass, "Draw the tree and the policy using GraphViz"
      c.option "--pngname FILE", String, "Output file for the drawn tree"
      c.option "--[no-]optimize", TrueClass, "Enables optimal policy computation for the tree (actived by default)"
      c.option "--horizon INTEGER", Integer, "Horizon of the debates (number of steps) (default 5)"
      c.option "--goalatks", TrueClass, "Enables executions where the proponent can attack its own goals"
      c.option "--onlyrelevant", TrueClass, "Removes executions with irrelevant arguments (arguments not connected to the active graph that are not in a new connected component)"
      c.option "--decfunc DEC_FUNC", DECISION_FUNCTIONS, "Decision function to use for the proponent"
      c.option "--alpha FLOAT", Float, "Alpha factor [0,1] to use for Hurwicz decision rule (default 0.5)"
      c.option "--discount REAL", Float, "Discount factor [0,1] to apply on outcomes (default 0.9)"
      c.option "--belieffunc FUNC", BELIEF_UPDATE_FUNCTIONS, "Belief update function to use"
      c.option "--updatefactor FLOAT", Float, "Belief update factor [0,1] to apply in unconstrained belief methods (default 1)"
      c.option "--valfunc VAL_FUNC", VALUATION_FUNCTIONS, "Execution valuation function to use"
      c.option "--aggfunc AGG_FUNC", AGGREGATION_FUNCTIONS, "Aggregation function to use to combine multi-parted goals"
      c.option "--weights WEIGHTS", Array, "Array of weights for the aggregation function (default uniform)"
      c.option "-p", "--profile", TrueClass, "Enables profiling (development only)"
      c.option "--[no-]evaluate", TrueClass, "Enables policy evaluation (deactivated by default)"
      c.option "-r", "--runs INTEGER", Integer, "Number of runs to average the policy evaluation (default 1000)"
      c.option "--proponent STRATEGY", String, "Proponent's strategy: random or optimal (default optimal)"
      c.option "--from STARTING_DIST", Float, "Lowest probability distribution distance to consider for the experiments (default 0, step of 0.1)"
      c.option "--to ENDING_DIST", Float, "Highest probability distribution distance to consider for the experiments (default 1, step of 0.1)"
      c.option "-q", "--quiet", TrueClass, "Runs quietly (no progress bar)"
      c.action do |args, options|
        RubyProf.start if options.profile
        @@graph = MCArg::Graph.build_from_apx(args.shift)

        options.default draw: false, optimize: true, goalatks: false, onlyrelevant: false, discount: 0.9, horizon: 5, pngname: "tree", updatefactor: 1, weights: [Rational(1, @@graph.goal.size)] * @@graph.goal.size, profile: false, runs: 1000, proponent: :optimal, evaluate: false, quiet: false, alpha: 0.5, from: 0.0, to: 1.0
        params = build_params_hash(options)

        tree  = @@graph.build_tree(params)
        tree.optimize if options.optimize
        tree.draw_tree(options.pngname) if options.draw

        if options.evaluate
          pro = case options.proponent.to_sym
            when :optimal then MCArg::Evaluator::OPTIMAL
            when :random then MCArg::Evaluator::RANDOM
          end
          puts MCArg::Evaluator.new(tree).evaluate(options.runs, pro, MCArg::Evaluator::DISCRETE, options.from, options.to)
        end

        if options.profile
          result = RubyProf.stop
          RubyProf::GraphHtmlPrinter.new(result).print(File.new("out.html", "w"))
        end
      end
    end

    run!
  end
end

MCArgBin.new.run if $0 == __FILE__
